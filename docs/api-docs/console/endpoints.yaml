swagger: "2.0"
info:
  description: "All the known endpoints for the VRChat API are listed below. While using the API you are required to follow VRChat's Term of Service. Abuse of the API may result in account termination."
  version: ""
  title: "Endpoints"
  termsOfService: "https://vrchat.com/legal"
host: "api.vrchat.cloud"
basePath: "/api/1/"
tags:
- name: "Miscellaneous"
  description: ""
- name: "User"
  description: "Endpoints controlling the current authenticated user."
- name: "Other users"
  description: "Endpoints for interacting with other users."
schemes:
- "https"
- "http"
paths:
  /config:
    get:
      tags:
      - "Miscellaneous"
      summary: "Remote Config."
      description: ""
      operationId: "GetConfig"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RemoteConfig"
  /auth/user:
    get:
      tags:
      - "User"
      summary: "Fetch current user information."
      description: "Fetching the user information requires the apiKey parameter and Authorization header"
      operationId: "GetCurrentUser"
      produces:
      - "application/json"
      parameters:
      - name: "apiKey"
        in: "query"
        description: "The required apiKey."
        default: "JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "The basic authentication defining the current user. Base64 encode: username:password"
        default: "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
        required: true
        type: "string"
        format: "base64"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CurrentUser"
    put:
      tags:
      - "User"
      summary: "Update current user information."
      description: "Updating the user information requires the apiKey parameter and Authorization header"
      operationId: "UpdateUser"
      produces:
      - "application/json"
      parameters:
      - name: "apiKey"
        in: "query"
        description: "The required apiKey."
        default: "JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "The basic authentication defining the current user. Base64 encode: username:password"
        default: "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
        required: true
        type: "string"
        format: "base64"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CurrentUser"

  /auth/user/friends:
    get:
      tags:
      - "User"
      summary: "Fetch current user friends."
      description: "Fetching the current user friends requires the apiKey parameter and Authorization header"
      operationId: "GetFriends"
      produces:
      - "application/json"
      parameters:
      - name: "apiKey"
        in: "query"
        description: "The required apiKey."
        default: "JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "The basic authentication defining the current user. Base64 encode: username:password"
        default: "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
        required: true
        type: "string"
        format: "base64"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FriendUser"
  /users:
    get:
      tags:
      - "Other users"
      summary: "Fetch all users."
      description: "Fetching all users requires the apiKey parameter and Authorization header"
      operationId: "GetAllUsers"
      produces:
      - "application/json"
      parameters:
      - name: "apiKey"
        in: "query"
        description: "The required apiKey."
        default: "JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "The basic authentication defining the current user. Base64 encode: username:password"
        default: "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
        required: true
        type: "string"
        format: "base64"
      - name: "search"
        in: "query"
        description: "The user to search for."
        type: "string"
      - name: "developerType"
        in: "query"
        description: "Active user by developer type, none for normal users and internal for moderators"
        type: "string"
      - name: "n"
        in: "query"
        description: "The amount of users to return."
        type: "string"
      - name: "offset"
        in: "query"
        description: "The amount of users to skip."
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /users/active:
    get:
      tags:
      - "Other users"
      summary: "Get all online users."
      description: "Fetching all active users requires the apiKey parameter and Authorization header"
      operationId: "GetActiveUser"
      produces:
      - "application/json"
      parameters:
      - name: "apiKey"
        in: "query"
        description: "The required apiKey."
        default: "JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "The basic authentication defining the current user. Base64 encode: username:password"
        default: "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
        required: true
        type: "string"
        format: "base64"
      - name: "search"
        in: "query"
        description: "The user to search for."
        type: "string"
      - name: "developerType"
        in: "query"
        description: "Active user by developer type, none for normal users and internal for moderators"
        type: "string"
      - name: "n"
        in: "query"
        description: "The amount of users to return."
        type: "string"
      - name: "offset"
        in: "query"
        description: "The amount of users to skip."
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

  /users/{username}/name:
    get:
      tags:
      - "Other users"
      summary: "Fetch a user by thier username."
      description: "Fetching a user requires the apiKey parameter and Authorization header"
      operationId: "GetUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "apiKey"
        in: "query"
        description: "The required apiKey."
        default: "JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "The basic authentication defining the current user. Base64 encode: username:password"
        default: "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
        required: true
        type: "string"
        format: "base64"
      - name: "username"
        in: "path"
        description: "The user to fetch."
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

  /users/{id}:
    get:
      tags:
      - "Other users"
      summary: "Fetch a user by their id."
      description: "Fetching a user requires the apiKey parameter and Authorization header"
      operationId: "GetUserByID"
      produces:
      - "application/json"
      parameters:
      - name: "apiKey"
        in: "query"
        description: "The required apiKey."
        default: "JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "The basic authentication defining the current user. Base64 encode: username:password"
        default: "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
        required: true
        type: "string"
        format: "base64"
      - name: "id"
        in: "path"
        description: "The user id to fetch."
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"


definitions:
  RemoteConfig:
    type: "object"
    properties:
      messageOfTheDay:
        type: "string"
      timeOutWorldId:
        type: "string"
      gearDemoRoomId:
        type: "string"
      releaseServerVersionStandalone:
        type: "string"
      downloadLinkWindows:
        type: "string"
      releaseAppVersionStandalone:
        type: "string"
      devAppVersionStandalone:
        type: "string"
      devServerVersionStandalone:
        type: "string"
      devDownloadLinkWindows:
        type: "string"
      currentTOSVersion:
        type: "string"
      releaseSdkUrl:
        type: "string"
      releaseSdkVersion:
        type: "string"
      devSdkUrl:
        type: "string"
      devSdkVersion:
        type: "string"
      whiteListedAssetUrls:
        type: "null"
      clientApiKey:
        type: "string"
      viveWindowsUrl:
        type: "string"
      sdkUnityVersion:
        type: "string"
      hubWorldId:
        type: "string"
      homeWorldId:
        type: "string"
      tutorialWorldId:
        type: "string"
      disableEventStream:
        type: "boolean"
      disableAvatarGating:
        type: "boolean"
      disableFeedbackGating:
        type: "boolean"
      disableRegistration:
        type: "boolean"
      disableUpgradeAccount:
        type: "boolean"
      disableCommunityLabs:
        type: "boolean"
      plugin:
        type: "string"
      sdkNotAllowedToPublishMessage:
        type: "string"
      sdkDeveloperFaqUrl:
        type: "string"
      sdkDiscordUrl:
        type: "string"
      notAllowedToSelectAvatarInPrivateWorldMessage:
        type: "string"
      userVerificationTimeout:
        type: "integer"
      userUpdatePeriod:
        type: "integer"
      userVerificationDelay:
        type: "integer"
      userVerificationRetry:
        type: "integer"
      worldUpdatePeriod:
        type: "integer"
      moderationQueryPeriod:
        type: "integer"
      defaultAvatar:
        type: "integer"
      dynamicWorldRows:
        type: "null"
      address:
        type: "string"
      contactEmail:
        type: "string"
      supportEmail:
        type: "string"
      jobsEmail:
        type: "string"
      copyrightEmail:
        type: "string"
      moderationEmail:
        type: "string"
      disableEmail:
        type: "boolean"
      appName:
        type: "string"
      serverName:
        type: "string"
      deploymentGroup:
        type: "string"
      buildVersionTag:
        type: "string"
      apiKey:
        type: "string"
        
  CurrentUser:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      displayName:
        type: "string"
      pastDisplayNames:
        type: "null"
      hasEmail:
        type: "boolean"
      hasPendingEmail:
        type: "boolean"
      obfuscatedEmail:
        type: "string"
      obfuscatedPendingEmail:
        type: "string"
      emailVerified:
        type: "boolean"
      hasBirthday:
        type: "boolean"
      unsubscribe:
        type: "boolean"
      friends:
        type: "null"
      friendGroupNames:
        type: "null"
      currentAvatarImageUrl:
        type: "string"
      currentAvatarThumbnailImageUrl:
        type: "string"
      currentAvatar:
        type: "string"
      currentAvatarAssetUrl:
        type: "string"
      acceptedTOSVersion:
        type: "integer"
      steamDetails:
        type: "null"
      hasLoggedInFromClient:
        type: "boolean"
      homeLocation:
        type: "string"
      status:
        type: "string"
      statusDescription:
        type: "string"
      tags:
        type: "null"
      developerType:
        type: "string"
      last_login:
        type: "string"
      isFriend:
        type: "boolean"
      friendKey:
        type: "string"
        
  FriendUser:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      displayName:
        type: "string"
      currentAvatarImageUrl:
        type: "string"
      currentAvatarThumbnailImageUrl:
        type: "string"
      tags:
        type: "null"
      developerType:
        type: "string"
      status:
        type: "string"
      statusDescription:
        type: "string"
      friendKey:
        type: "string"
      isFriend:
        type: "boolean"
      location:
        type: "string"
        
  User:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      displayName:
        type: "string"
      currentAvatarImageUrl:
        type: "string"
      currentAvatarThumbnailImageUrl:
        type: "string"
      tags:
        type: "null"
      developerType:
        type: "string"
      isFriend:
        type: "boolean"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
